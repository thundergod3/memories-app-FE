[{"D:\\Code\\MERN Project\\memories\\client\\src\\index.tsx":"1","D:\\Code\\MERN Project\\memories\\client\\src\\App.tsx":"2","D:\\Code\\MERN Project\\memories\\client\\src\\stores\\configureStore.ts":"3","D:\\Code\\MERN Project\\memories\\client\\src\\constants\\history.ts":"4","D:\\Code\\MERN Project\\memories\\client\\src\\stores\\rootSaga.ts":"5","D:\\Code\\MERN Project\\memories\\client\\src\\stores\\rootReducer.ts":"6","D:\\Code\\MERN Project\\memories\\client\\src\\pages\\Homepage.tsx":"7","D:\\Code\\MERN Project\\memories\\client\\src\\stores\\saga\\postsSaga.ts":"8","D:\\Code\\MERN Project\\memories\\client\\src\\stores\\redux\\reducers\\postsReducer.ts":"9","D:\\Code\\MERN Project\\memories\\client\\src\\stores\\redux\\reducers\\utilsReducer.ts":"10","D:\\Code\\MERN Project\\memories\\client\\src\\services\\postsService.ts":"11","D:\\Code\\MERN Project\\memories\\client\\src\\services\\index.ts":"12","D:\\Code\\MERN Project\\memories\\client\\src\\components\\layouts\\Form\\index.tsx":"13","D:\\Code\\MERN Project\\memories\\client\\src\\components\\posts\\PostList\\index.tsx":"14","D:\\Code\\MERN Project\\memories\\client\\src\\components\\posts\\PostItem\\index.tsx":"15","D:\\Code\\MERN Project\\memories\\client\\src\\components\\posts\\PostList\\style.ts":"16","D:\\Code\\MERN Project\\memories\\client\\src\\components\\posts\\PostItem\\style.ts":"17","D:\\Code\\MERN Project\\memories\\client\\src\\components\\layouts\\Form\\style.ts":"18","D:\\Code\\MERN Project\\memories\\client\\src\\constants\\types.ts":"19","D:\\Code\\MERN Project\\memories\\client\\src\\stores\\redux\\actions\\postsAction.ts":"20","D:\\Code\\MERN Project\\memories\\client\\src\\pages\\pages.ts":"21"},{"size":402,"mtime":1609594466591,"results":"22","hashOfConfig":"23"},{"size":571,"mtime":1609650913732,"results":"24","hashOfConfig":"23"},{"size":531,"mtime":1609594663184,"results":"25","hashOfConfig":"23"},{"size":142,"mtime":1609593974717,"results":"26","hashOfConfig":"23"},{"size":168,"mtime":1609594328033,"results":"27","hashOfConfig":"23"},{"size":328,"mtime":1609595116738,"results":"28","hashOfConfig":"23"},{"size":1086,"mtime":1610207250226,"results":"29","hashOfConfig":"23"},{"size":1989,"mtime":1610205687083,"results":"30","hashOfConfig":"23"},{"size":2007,"mtime":1610206410691,"results":"31","hashOfConfig":"23"},{"size":410,"mtime":1609650292070,"results":"32","hashOfConfig":"23"},{"size":848,"mtime":1610206513429,"results":"33","hashOfConfig":"23"},{"size":614,"mtime":1610212067381,"results":"34","hashOfConfig":"23"},{"size":3654,"mtime":1610212168878,"results":"35","hashOfConfig":"23"},{"size":919,"mtime":1610206677312,"results":"36","hashOfConfig":"23"},{"size":2269,"mtime":1610206273995,"results":"37","hashOfConfig":"23"},{"size":266,"mtime":1609649771243,"results":"38","hashOfConfig":"23"},{"size":939,"mtime":1609649756052,"results":"39","hashOfConfig":"23"},{"size":600,"mtime":1609678209259,"results":"40","hashOfConfig":"23"},{"size":2594,"mtime":1610205371224,"results":"41","hashOfConfig":"23"},{"size":1954,"mtime":1610205458789,"results":"42","hashOfConfig":"23"},{"size":209,"mtime":1610207312678,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1vlxftu",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"D:\\Code\\MERN Project\\memories\\client\\src\\index.tsx",[],["90","91"],"D:\\Code\\MERN Project\\memories\\client\\src\\App.tsx",["92"],"import React, { Dispatch, useEffect } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport { useDispatch } from \"react-redux\";\nimport postsAction from \"./stores/redux/actions/postsAction\";\n\nimport \"./App.scss\";\n\nimport Homepage from \"./pages/Homepage\";\n\nconst App = (): JSX.Element => {\n\tconst { fetchPostListRequest } = postsAction;\n\tconst dispatch: Dispatch<any> = useDispatch();\n\n\tuseEffect(() => {\n\t\tdispatch(fetchPostListRequest());\n\t}, []);\n\n\treturn (\n\t\t<Switch>\n\t\t\t<Route path=\"/\" component={Homepage} />\n\t\t</Switch>\n\t);\n};\n\nexport default App;\n","D:\\Code\\MERN Project\\memories\\client\\src\\stores\\configureStore.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\constants\\history.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\stores\\rootSaga.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\stores\\rootReducer.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\pages\\Homepage.tsx",[],"D:\\Code\\MERN Project\\memories\\client\\src\\stores\\saga\\postsSaga.ts",["93","94","95","96"],"import { AxiosResponse } from \"axios\";\r\nimport { SagaIterator } from \"redux-saga\";\r\nimport { takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\r\n\r\nimport * as types from \"../../constants/types\";\r\n\r\nimport postServices from \"../../services/postsService\";\r\nimport postsAction from \"../redux/actions/postsAction\";\r\n\r\nimport { PostItemI, PostListI } from \"../redux/reducers/postsReducer\";\r\n\r\nfunction* fetchPostList() {\r\n\ttry {\r\n\t\tconst { data }: AxiosResponse = yield call<any>(postServices.fetchPostList);\r\n\t\tyield put(postsAction.fetchPostListSucceeded(data));\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n}\r\n\r\nfunction* createPostItem({ postItem }: types.CreatePostItemI) {\r\n\ttry {\r\n\t\tyield put(postsAction.createPostItemSucceeded(postItem));\r\n\t\tyield call<any>(postServices.createPostItem, { postItem });\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n}\r\n\r\nfunction* editPostItem({ postId, postEdit }: types.EditPostItemI) {\r\n\ttry {\r\n\t\tyield put(postsAction.editPostItemSucceeded(postId, postEdit));\r\n\t\tyield call<any>(postServices.editPostItem, { postId, postEdit });\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n}\r\n\r\nfunction* deletePostItem({ postId }: types.DeletePostItemI) {\r\n\ttry {\r\n\t\tyield put(postsAction.deletePostItemSucceeded(postId));\r\n\t\tyield call<any>(postServices.deletePostItem, { postId });\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n}\r\n\r\nfunction* likePostItem({ postId }: types.LikePostItemI) {\r\n\ttry {\r\n\t\tyield put(postsAction.likePostItemSucceeded(postId));\r\n\t\tyield call<any>(postServices.likePostItem, { postId });\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n}\r\n\r\nexport default function* postsSaga() {\r\n\tyield takeLatest(types.FETCH_POST_LIST_REQUEST, fetchPostList);\r\n\tyield takeLatest(types.CREATE_POST_ITEM_REQUEST, createPostItem);\r\n\tyield takeLatest(types.EDIT_POST_ITEM_REQUEST, editPostItem);\r\n\tyield takeLatest(types.DELETE_POST_ITEM_REQUEST, deletePostItem);\r\n\tyield takeLatest(types.LIKE_POST_ITEM_REQUEST, likePostItem);\r\n}\r\n","D:\\Code\\MERN Project\\memories\\client\\src\\stores\\redux\\reducers\\postsReducer.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\stores\\redux\\reducers\\utilsReducer.ts",["97"],"import * as types from \"../../../constants/types\";\r\nimport produce from \"immer\";\r\n\r\ninterface UtilsInitialState {}\r\n\r\nconst initalState: UtilsInitialState = {};\r\n\r\nconst utilsReducer = (state = initalState, action: any) =>\r\n\tproduce(state, (draft: UtilsInitialState) => {\r\n\t\tswitch (action.type) {\r\n\t\t\tdefault:\r\n\t\t\t\treturn draft;\r\n\t\t}\r\n\t});\r\n\r\nexport default utilsReducer;\r\nexport type { UtilsInitialState };\r\n","D:\\Code\\MERN Project\\memories\\client\\src\\services\\postsService.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\services\\index.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\components\\layouts\\Form\\index.tsx",[],"D:\\Code\\MERN Project\\memories\\client\\src\\components\\posts\\PostList\\index.tsx",[],"D:\\Code\\MERN Project\\memories\\client\\src\\components\\posts\\PostItem\\index.tsx",[],"D:\\Code\\MERN Project\\memories\\client\\src\\components\\posts\\PostList\\style.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\components\\posts\\PostItem\\style.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\components\\layouts\\Form\\style.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\constants\\types.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\stores\\redux\\actions\\postsAction.ts",[],"D:\\Code\\MERN Project\\memories\\client\\src\\pages\\pages.ts",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":17,"column":5,"nodeType":"104","endLine":17,"endColumn":7,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":22},{"ruleId":"106","severity":1,"message":"110","line":3,"column":10,"nodeType":"108","messageId":"109","endLine":3,"endColumn":19},{"ruleId":"106","severity":1,"message":"111","line":10,"column":10,"nodeType":"108","messageId":"109","endLine":10,"endColumn":19},{"ruleId":"106","severity":1,"message":"112","line":10,"column":21,"nodeType":"108","messageId":"109","endLine":10,"endColumn":30},{"ruleId":"106","severity":1,"message":"113","line":1,"column":13,"nodeType":"108","messageId":"109","endLine":1,"endColumn":18},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'fetchPostListRequest'. Either include them or remove the dependency array.","ArrayExpression",["116"],"@typescript-eslint/no-unused-vars","'SagaIterator' is defined but never used.","Identifier","unusedVar","'takeEvery' is defined but never used.","'PostItemI' is defined but never used.","'PostListI' is defined but never used.","'types' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},"Update the dependencies array to be: [dispatch, fetchPostListRequest]",{"range":"119","text":"120"},[461,463],"[dispatch, fetchPostListRequest]"]